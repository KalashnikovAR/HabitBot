import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from dotenv import load_dotenv
from database import init_db, get_db
from config import BOT_TOKEN

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
if not BOT_TOKEN:
    print("–û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –∑–∞–¥–∞–Ω!")
    exit(1)

bot = os.getenv('BOT_TOKEN')
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("BOT_TOKEN"), parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    try:
        init_db()
        await message.answer(
            "‚ö° <b>–ü—Ä–∏–≤–µ—Ç! –Ø PowerHabitBot!</b>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/habits - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏\n"
            "/todo - –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"
        )
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
        logging.error(f"Start error: {e}")

# --- –ü—Ä–∏–≤—ã—á–∫–∏ ---
@dp.message(Command("habits"))
async def handle_habits(message: types.Message):
    try:
        args = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else ""
        user_id = message.from_user.id

        if not args:
            with get_db() as conn:
                with conn.cursor() as cur:
                    cur.execute("SELECT habit, streak FROM habits WHERE user_id = %s", (user_id,))
                    habits = cur.fetchall()

            if not habits:
                await message.answer("–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å: /habits + –ß–∏—Ç–∞—Ç—å")
            else:
                text = "üìå <b>–¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:</b>\n" + "\n".join(
                    f"‚Ä¢ {h['habit']} (üî• {h['streak']} –¥–Ω.)" for h in habits
                )
                await message.answer(text)

        elif args.startswith("+"):
            habit = args[1:].strip()
            with get_db() as conn:
                with conn.cursor() as cur:
                    cur.execute("INSERT INTO habits (user_id, habit) VALUES (%s, %s)", (user_id, habit))
                    conn.commit()
            await message.answer(f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: <b>{habit}</b>")

        elif args.startswith("-"):
            habit = args[1:].strip()
            with get_db() as conn:
                with conn.cursor() as cur:
                    cur.execute("DELETE FROM habits WHERE user_id = %s AND habit = %s", (user_id, habit))
                    conn.commit()
            await message.answer(f"‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞: <b>{habit}</b>")

        else:
            with get_db() as conn:
                with conn.cursor() as cur:
                    cur.execute("""
                        UPDATE habits 
                        SET streak = streak + 1, last_completed = CURRENT_DATE 
                        WHERE user_id = %s AND habit = %s
                        AND (last_completed IS NULL OR last_completed < CURRENT_DATE)
                        RETURNING streak
                    """, (user_id, args.strip()))
                    result = cur.fetchone()
                    conn.commit()

            if not result:
                await message.answer("‚ö†Ô∏è –£–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            else:
                await message.answer(f"üî• <b>+1 –¥–µ–Ω—å!</b> –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: <b>{result[0]}</b> –¥–Ω–µ–π")

    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
        logging.error(f"Habits error: {e}")

# --- –ó–∞–¥–∞—á–∏ ---
@dp.message(Command("todo"))
async def handle_todo(message: types.Message):
    try:
        args = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else ""
        user_id = message.from_user.id

        if not args:
            with get_db() as conn:
                with conn.cursor() as cur:
                    cur.execute("SELECT id, task FROM tasks WHERE user_id = %s AND done = FALSE", (user_id,))
                    tasks = cur.fetchall()

            if not tasks:
                await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç. –î–æ–±–∞–≤—å: /todo + –ö—É–ø–∏—Ç—å —Ö–ª–µ–±")
            else:
                text = "üìù <b>–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:</b>\n" + "\n".join(
                    f"{i}. {t['task']}" for i, t in enumerate(tasks, 1)
                )
                await message.answer(text)

        elif args.startswith("+"):
            task = args[1:].strip()
            with get_db() as conn:
                with conn.cursor() as cur:
                    cur.execute("INSERT INTO tasks (user_id, task) VALUES (%s, %s)", (user_id, task))
                    conn.commit()
            await message.answer(f"üìå –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: <b>{task}</b>")

        elif args.startswith("-"):
            task_id = args[1:].strip()
            with get_db() as conn:
                with conn.cursor() as cur:
                    cur.execute("DELETE FROM tasks WHERE user_id = %s AND id = %s", (user_id, task_id))
                    conn.commit()
            await message.answer(f"üóë –ó–∞–¥–∞—á–∞ <b>{task_id}</b> —É–¥–∞–ª–µ–Ω–∞")

        elif args.startswith("‚úì") or args.startswith("v"):
            task_id = args[1:].strip()
            with get_db() as conn:
                with conn.cursor() as cur:
                    cur.execute("UPDATE tasks SET done = TRUE WHERE user_id = %s AND id = %s", (user_id, task_id))
                    conn.commit()
            await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ <b>{task_id}</b> –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")

    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
        logging.error(f"Todo error: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
